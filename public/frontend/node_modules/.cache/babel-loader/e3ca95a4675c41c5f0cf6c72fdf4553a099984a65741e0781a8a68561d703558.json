{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSort = defaultSort;\n/* Sorts the given data by the specified column\n * @parameter {array<object>} data - The data to sort\n * @parameter {string} column - the name of the column to sort\n * @parameter {boolean optional} sortAscending - whether or not to sort this column in ascending order\n *\n * TODO: Needs tests!\n */\nfunction defaultSort(data, column) {\n  var sortAscending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return data.sort(function (original, newRecord) {\n    original = !!original.get(column) && original.get(column) || \"\";\n    newRecord = !!newRecord.get(column) && newRecord.get(column) || \"\";\n\n    //TODO: This is about the most cheezy sorting check ever.\n    //Make it better\n    if (original === newRecord) {\n      return 0;\n    } else if (original > newRecord) {\n      return sortAscending ? 1 : -1;\n    } else {\n      return sortAscending ? -1 : 1;\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","defaultSort","data","column","sortAscending","arguments","length","undefined","sort","original","newRecord","get"],"sources":["/Users/eugo/commentsold/lumen/public/front/node_modules/griddle-react/dist/module/utils/sortUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSort = defaultSort;\n/* Sorts the given data by the specified column\n * @parameter {array<object>} data - The data to sort\n * @parameter {string} column - the name of the column to sort\n * @parameter {boolean optional} sortAscending - whether or not to sort this column in ascending order\n *\n * TODO: Needs tests!\n */\nfunction defaultSort(data, column) {\n  var sortAscending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  return data.sort(function (original, newRecord) {\n    original = !!original.get(column) && original.get(column) || \"\";\n    newRecord = !!newRecord.get(column) && newRecord.get(column) || \"\";\n\n    //TODO: This is about the most cheezy sorting check ever.\n    //Make it better\n    if (original === newRecord) {\n      return 0;\n    } else if (original > newRecord) {\n      return sortAscending ? 1 : -1;\n    } else {\n      return sortAscending ? -1 : 1;\n    }\n  });\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAWA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACjC,IAAIC,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;EAE5F,OAAOH,IAAI,CAACM,IAAI,CAAC,UAAUC,QAAQ,EAAEC,SAAS,EAAE;IAC9CD,QAAQ,GAAG,CAAC,CAACA,QAAQ,CAACE,GAAG,CAACR,MAAM,CAAC,IAAIM,QAAQ,CAACE,GAAG,CAACR,MAAM,CAAC,IAAI,EAAE;IAC/DO,SAAS,GAAG,CAAC,CAACA,SAAS,CAACC,GAAG,CAACR,MAAM,CAAC,IAAIO,SAAS,CAACC,GAAG,CAACR,MAAM,CAAC,IAAI,EAAE;;IAElE;IACA;IACA,IAAIM,QAAQ,KAAKC,SAAS,EAAE;MAC1B,OAAO,CAAC;IACV,CAAC,MAAM,IAAID,QAAQ,GAAGC,SAAS,EAAE;MAC/B,OAAON,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC,MAAM;MACL,OAAOA,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC;IAC/B;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}